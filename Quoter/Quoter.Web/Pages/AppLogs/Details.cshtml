@page
@model Quoter.Web.Pages.AppLogs.DetailsModel
@using Quoter.Web.ViewModels.Shared;

@{
	ViewData["Title"] = Localizer["Log details ", Model.LogId];

	BreadCrumbsViewModel breadCrumbs = new(
		Localizer["Log details", Model.LogId],
			new RouteViewModel(Localizer["Dashboard"], "/AdminDashboard/Index"),
			new RouteViewModel(Localizer["Application logs"], "/AppLogs/Index")
	);
}
<div class="container">
	@await Html.PartialAsync("_BreadCrumbsPartial", breadCrumbs)

	<div class="container text-center">

		<div class="row row-cols-auto">
			<div class="col">
				<h2>@Localizer["Log details ", Model.LogId]</h2>
			</div>
		</div>
	</div>

	<div class="container mt-2">
		<dl class="row">
			<dt class="col-sm-2">
				@Html.DisplayNameFor(model => model.LogId)
			</dt>
			<dd class="col-sm-10">
				@Html.DisplayFor(model => model.LogId)
			</dd>
			<dt class="col-sm-2">
				@Html.DisplayNameFor(model => model.Timestamp)
			</dt>
			<dd class="col-sm-10">
				@Html.DisplayFor(model => model.Timestamp)
			</dd>
			<dt class="col-sm-2">
				@Html.DisplayNameFor(model => model.Level)
			</dt>
			<dd class="col-sm-10">
				@Html.DisplayFor(model => model.Level)
			</dd>
			<dt class="col-sm-2">
				@Html.DisplayNameFor(model => model.RenderedMessage)
			</dt>
			<dd class="col-sm-10">
				@Html.DisplayFor(model => model.RenderedMessage)
			</dd>
			<dt class="col-sm-2">
				@Html.DisplayNameFor(model => model.Properties)
			</dt>
			<dd class="col-sm-10">
				@if (!string.IsNullOrEmpty(Model.Properties))
				{
					try
					{
						// For pretty printing JSON
						string prettyJson = System.Text.Json.JsonSerializer.Serialize(
						System.Text.Json.JsonSerializer.Deserialize<object>(Model.Properties),
						new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
						<pre class="bg-light p-2 rounded" style="white-space: pre-wrap; word-break: break-all;">@prettyJson</pre>
					}
					catch
					{
						@Html.DisplayFor(model => model.Properties)
					}
				}
			</dd>
			<dt class="col-sm-2">
				@Html.DisplayNameFor(model => model.Exception)
			</dt>
			<dd class="col-sm-10">
				<pre class="bg-light p-2 rounded" style="white-space: pre-wrap; word-break: break-all;">@Model.Exception</pre>
			</dd>
		</dl>
	</div>
</div>